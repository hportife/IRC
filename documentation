Внутрисервеное взаимодействие.

На момент последнего апдейта начата разработка классов пользователя (usermv ), 
user_creator, room, nickname_storage.

Класс user бдует обозначать пользователя. Находится в альфа-проработке. Будет иметь 
параметры самого пользователя и айдишник, который будет назначен accept-ом.

Класс room бдует обозначать комнату (канал/переписку). Находится в альфа-проработке

Класс user_creator будет принимать параметры при появлении нового соединения, хранить 
их пока соединение существует, или пользователь не был полностью завалидирован 
и создан, или валидацию не прошли какие-либо параметры переданные клиентом для 
регистрации (входа) на сервере. Принцип работы будет таковым: при появлении соединения, 
сервер будет создавать объект Юзер-криейтор, передавая конструктору accept-id, после 
чего будут поочерёдно передаваться в сеттеры параметры. Когда все параметры будут 
переданы, серевер должен будет запустить валидатор, который будет проверять правильность 
ввода пароля и корректность ведёного ника с помощью хранилища ников (nickname_storage).
В зависимости от полученной ошибки будут приниматься действия. 

ПОДРОБНОЕ ОПИСАНИЕ ПАРАМЕТРОВ, ИСПОЛНЯЕМОГО ФУНКЦИОНАЛА КЛАССОВ, ИХ ИСПОЛЬЗОВАНИЕ В СЕРВЕРЕ
И РАБОТА САМОГО СЕРВЕРА БУДЕТ ПО ПРИВЕДЕНИЮ КЛАССОВ В СТАТУС "ПЕРВИЧНО ГОТОВ"


Класс NicknameStorage На момент последней версии (commit 5802177920f179b4bc14c97dd0f1111adf427316)
  В качестве предопределённых возвратных значений имеет: 
    - ICKNAMEISMAYBEGIVEN  -  никнейм может быть выдан пользователю и занесён в хранилище никнеймов.
    - ERR_NICKNAMEINUSE    -  никнейм имеется в хранилище и не может быть выдан пользователю.
    - ERR_NICKNAMEISTOOLONG-  никнейм имеет длинну большую, чем разрешённая (> 9 символов).
    - ERR_NICKNAMEISEMPTY  -  никнейм является пустой строкой.
    - NICKNAMEHASBEENGIVEN -  никнейм был выдан пользователю и занесн в хранилище этим методом.

  Реализованные методы:
    -Конструктор/деструктор   : В теле имеют только вывод информационных сообщений.
    -get_storage              : Вывод всех ников в хранилище в формате: "N: Nickname\n"
    -check_size_added_nickname: Проверка длинны никнейма, возвращаемые значения: 
                                                              -ERR_NICKNAMEISTOOLONG
                                                              -ERR_NICKNAMEISEMPTY
                                                              -0 (нарушения отс.)
    -add_nickname             : Выполняет check_size_added_nickname и в случае возвращения 
                                0, добавляет никнейм в хранилище и сортирует его.
    -delete_nickname          : Ищет никнейм в хранилище, в случае нахождения - удаляет и 
                                возвращает 0, если никнейм не был найден, возвращает 1
    -search_a_conflict        : Ищет никнейм в хранилище, если никнейм был найден - 
                                возвращет ERR_NICKNAMEINUSE, если никнейм не был найден -
                                возвращает ICKNAMEISMAYBEGIVEN
    -sort_a_storage           : Использует std::sort и выводит сообщение о своём использовании
    
    ПРИМЕЧАНИЯ: 1.  delete_nickname и search_a_conflict используют в своей основе одну и ту же 
                    механику поиска, следует вынести её в отдельный метод.
                2.  sort_a_storage использует слепой std::sort без применения его на хранилище,
                    нужно проверить, возможно, это ничего не сортирует, если это так, то применить
                    std::sort на вектор, лежащий в основе NicknameStorage.
                    
                    
Класс UserStorage На момент последней версии (commit a1eb0e6eb2ccbfe500837ad37730ab9facebf621)
  Предопределённых возвратных значений не имеет.
  Внутренние поля: 
    -Вектор пользователей
  Реализованные методы:
    -Конструктор/деструктор       : В теле имеют только вывод информационных сообщений.
    -add_user                     : с помощью std::vector.push_back добавляет юзера в хранилище
                                    и выводит информационное сообщение
    -search_by_nickname           : Ищет в хранилище юзера по никнейму. Если юзер есть - возвращает 
                                    его, если нет, то возвращает nullptr 
    -search_by_id                 : Ищет в хранилище юзера по айди. Если юзер есть - возвращает 
                                    его, если нет, то возвращает nullptr
    -get_user_position_in_storage : Возвращает позицию пользователя в хранилище по указателю на 
                                    объект пользователя. В случае его остутствия, возвращет -1
    -delete_user_from_storage     : Ищет пользователя с помощью get_user_position_in_storage и 
                                    удаляет его из хранилища в случае его наличия.
                                
Класс User на момент последнего коммита (a1eb0e6eb2ccbfe500837ad37730ab9facebf621)
  Внутренние поля: 
                    -строки: 
                              -user_login
                              -user_nickname
                              -user_realname 
                    -айди: 
                              -user_id
  Реализованные методы:
  -Конструктор                     : принимает в качестве параметров логин, никнейм, айди и реальное имя
                                     создаёт объект, кладя эти параметры во вутренние поля
  -set_nickname                    : принимает новый никнейм и устанавливает/заменяет его в класс.
  -геттеры для параметров
  
Класс UserCreator на момент последнего коммита (a1eb0e6eb2ccbfe500837ad37730ab9facebf621)
    Имеет предопределённые возвращаемые значения:
      -CORRPASS
      -INCORRPASS
      -NICKNAMEISMAYBEGIVEN
      -ERR_NICKNAMEINUSE
      -ERR_NICKNAMEISTOOLONG
      -ERR_NICKNAMEISEMPTY
      -NICKNAMEHASBEENGIVEN
    Внутренние поля:
      -указатель на хранилище никнеймов
      -Поля для создания объекта пользователя (логин,никнейм,айди,настоящее имя)
      -парль сервера
      -пароль введёный пользователем, для сравнения с паролем сервера
      -указатель на объект пользователя для его создания
    Реализованные метод:
      -Конструктор                : принимает айди, данный методом bind, указатель на хранилище для
                                    сохранения никнейма, пароль сервера
      -Деструктор                 : Выводит информацию
      -Сеттеры для логина/пароля/никнейма/реального имени
      -pass_validation            : Возвращает CORRPASS в случае верно введённого пользователем пароля
                                    INCORRPASS в случае неверно введённого пароля
      -nickname_validation        : Проверяет никнейм на длину (1-9 символов) и наличие никнейма в 
                                    хранилище во избежание конфликтов. Возвращет ERR_NICKNAMEISTOOLONG
                                    в случае слишком большой длины ника, ERR_NICKNAMEINUSE если
                                    никнейм уже имеется в хранилище, NICKNAMEISMAYBEGIVEN если всё
                                    в порядке и никнейми может быть выдан.
      -parameter_validation       : запускает по очереди pass_validation и nickname_validation
                                    в случае успешной валидации возвращает NICKNAMEISMAYBEGIVEN
      -swap_nickname
      -get_ready_user             : запускает валидацию параметров, после чего возвращает:
                                      -NICKNAMEHASBEENGIVEN - валидация пройдена и пользователь создан
                                      -ERR_NICKNAMEINUSE    - пользователю нужно ввести никнейм повторно
                                                              возвращает nullptr
                                      -INCORRPASS           - деструктит пользователя и возвращает nullptr
Класс UserCreator на момент последнего коммита (7be151d8cd387b9dbc7bb18b7ddfd59cfa4fae75)
  Имеет предопределённые возвращаемые значения:
    -ROOM_MODE_PRIVATE
    -ROOM_MODE_PUBLIC
    -USER_IS_OPER
    -USER_IS_NOT_OPER
    -USER_IN_ROOM
    -USER_NOT_IN_ROOM
    -JOIN_COMPLETE
    -LEAVE_COMPLETE
  Внутренние поля: 
    -строка с именем комнаты (std::string room_name)
    -NicknameStorage:
      -хранилище с никами пользователей 
      -хранилище с никами операторов
    -режим комнаты (PRIVATE/PUBLIC)
  Реализованные методы:
    -Конструктор, принимающий никнейм создателя                           : задаёт режим комнаты приватный 
                                                                            и даёт название комнате из 
                                                                            хранилища.
    -Конструктор, принимающий никнейм создателя и режим                   : даёт название комнате из 
                                                                            хранилища.
    -Конструктор, принимающий никнейм создателя, режим и название комнаты : присваивает поля в папраметры
                                                                            класса.
    -Дефолтный деструктор
    -Геттер для имени комнаты/режима комнаты
    -Сеттер для режима комнаты
    
    
    
    
    
    
    
    
    
    
    
    
    
    
